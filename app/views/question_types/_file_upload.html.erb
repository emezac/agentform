<div class="space-y-4">
  <div class="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-indigo-400 transition-colors file-drop-zone">
    <%= form.file_field "answer[value]", 
                       multiple: config['multiple'] == true,
                       accept: config['allowed_types']&.join(','),
                       required: question.required?,
                       class: "sr-only",
                       data: { 
                         "question-response-target": "answerInput",
                         "action": "change->question-response#validateInput change->question-response#handleFileUpload"
                       } %>
    
    <div class="space-y-2">
      <svg class="mx-auto h-12 w-12 text-gray-400" stroke="currentColor" fill="none" viewBox="0 0 48 48">
        <path d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
      </svg>
      
      <div class="text-sm text-gray-600">
        <label for="<%= form.object_name %>_answer_value" class="cursor-pointer font-medium text-indigo-600 hover:text-indigo-500">
          Upload <%= config['multiple'] == true ? 'files' : 'a file' %>
        </label>
        <span> or drag and drop</span>
      </div>
      
      <% if config['accepted_types']&.any? %>
        <p class="text-xs text-gray-500">
          Accepted formats: <%= config['accepted_types'].join(', ') %>
        </p>
      <% end %>
      
      <% if config['max_size_mb'] %>
        <p class="text-xs text-gray-500">
          Maximum size: <%= config['max_size_mb'] %>MB per file
        </p>
      <% end %>
    </div>
  </div>
  
  <!-- File preview area -->
  <div class="hidden space-y-2" data-question-response-target="filePreview">
    <h4 class="text-sm font-medium text-gray-900">Selected files:</h4>
    <div class="space-y-1" data-question-response-target="fileList">
      <!-- Files will be listed here -->
    </div>
  </div>
  
  <% if config['help_text'] %>
    <p class="text-xs text-gray-500"><%= config['help_text'] %></p>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const dropZone = document.querySelector('.file-drop-zone');
    const fileInput = document.querySelector('input[type="file"]');
    const filePreview = document.querySelector('[data-question-response-target="filePreview"]');
    const fileList = document.querySelector('[data-question-response-target="fileList"]');
    
    if (!dropZone || !fileInput) return;
    
    // Handle drag and drop
    dropZone.addEventListener('dragover', function(e) {
      e.preventDefault();
      dropZone.classList.add('border-indigo-500', 'bg-indigo-50');
    });
    
    dropZone.addEventListener('dragleave', function(e) {
      e.preventDefault();
      dropZone.classList.remove('border-indigo-500', 'bg-indigo-50');
    });
    
    dropZone.addEventListener('drop', function(e) {
      e.preventDefault();
      dropZone.classList.remove('border-indigo-500', 'bg-indigo-50');
      
      const files = e.dataTransfer.files;
      if (files.length > 0) {
        fileInput.files = files;
        fileInput.dispatchEvent(new Event('change'));
      }
    });
    
    // Handle click to open file dialog
    dropZone.addEventListener('click', function() {
      fileInput.click();
    });
    
    // Handle file selection
    fileInput.addEventListener('change', function() {
      updateFilePreview();
    });
    
    function updateFilePreview() {
      if (fileInput.files.length === 0) {
        filePreview.classList.add('hidden');
        return;
      }
      
      filePreview.classList.remove('hidden');
      fileList.innerHTML = '';
      
      Array.from(fileInput.files).forEach(file => {
        const fileItem = document.createElement('div');
        fileItem.className = 'flex items-center space-x-2 text-sm text-gray-600';
        fileItem.innerHTML = `
          <svg class="h-4 w-4 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M4 4a2 2 0 012-2h4.586A2 2 0 0112 2.586L15.414 6A2 2 0 0116 7.414V16a2 2 0 01-2 2H6a2 2 0 01-2-2V4z" clip-rule="evenodd" />
          </svg>
          <span>${file.name}</span>
          <span class="text-xs text-gray-400">(${formatFileSize(file.size)})</span>
        `;
        fileList.appendChild(fileItem);
      });
    }
    
    function formatFileSize(bytes) {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
  });
</script>