#!/usr/bin/env ruby
# SuperAgent A2A Server Startup Script
# Generated by rails generate super_agent:a2a_server

APP_PATH = File.expand_path('../config/application', __dir__)
require_relative '../config/boot'
require APP_PATH
Rails.application.require_environment!

require 'super_agent/a2a/server'

# Server configuration
PORT = ENV['A2A_PORT'] || <%= server_port %>
HOST = ENV['A2A_HOST'] || '<%= server_host %>'
<% if auth_enabled? -%>
AUTH_TOKEN = ENV['SUPER_AGENT_A2A_TOKEN']
<% end -%>

<% if ssl_enabled? -%>
# SSL configuration
SSL_CERT_PATH = ENV['SSL_CERT_PATH'] || Rails.root.join('config', 'ssl', 'cert.pem')
SSL_KEY_PATH = ENV['SSL_KEY_PATH'] || Rails.root.join('config', 'ssl', 'key.pem')

ssl_config = if File.exist?(SSL_CERT_PATH) && File.exist?(SSL_KEY_PATH)
  {
    cert_path: SSL_CERT_PATH,
    key_path: SSL_KEY_PATH
  }
else
  puts "Warning: SSL certificates not found. Starting without SSL."
  nil
end
<% else -%>
ssl_config = nil
<% end -%>

puts "Starting SuperAgent A2A Server..."
puts "Host: #{HOST}"
puts "Port: #{PORT}"
<% if auth_enabled? -%>
puts "Authentication: #{AUTH_TOKEN ? 'enabled' : 'disabled'}"
<% end -%>
<% if ssl_enabled? -%>
puts "SSL: #{ssl_config ? 'enabled' : 'disabled'}"
<% end -%>

begin
  server = SuperAgent::A2A::Server.new(
    port: PORT.to_i,
    host: HOST,
<% if auth_enabled? -%>
    auth_token: AUTH_TOKEN,
<% end -%>
<% if ssl_enabled? -%>
    ssl_config: ssl_config
<% end -%>
  )
  
  puts "Registering workflows..."
  server.register_all_workflows
  
  puts "Server starting on #{ssl_config ? 'https' : 'http'}://#{HOST}:#{PORT}"
  puts "Press Ctrl+C to stop"
  
  server.start
rescue Interrupt
  puts "\nShutting down server..."
rescue => e
  puts "Error starting server: #{e.message}"
  puts e.backtrace.join("\n")
  exit 1
end